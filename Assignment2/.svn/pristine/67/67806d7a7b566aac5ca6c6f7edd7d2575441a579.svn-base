package driver;

public class Move extends Command {

	private String documentation = "";

	public String runCommand(String input) {
		// Remove extra spaces from input
		input = input.trim().replaceAll(" +", " ");
		// Split the input into OLDPATH and NEWPATH at the space
		String[] inputs = input.split(" ");
		// Find the desired Directory/File for OLDPATH
		Object oldpath = FileSystem.pathToDirorFile(inputs[0]);
		// Find the desired Directory/File for NEWPATH
		Object newpath = FileSystem.pathToDirorFile(inputs[1]);
		// If OLDPATH is a File and NEWPATH is a Directory
		if (oldpath instanceof File & newpath instanceof Directory) {
			/*
			 * Call the moveFile method with OLDPATH and NEWPATH as its
			 * parameters
			 */
			moveFile((File) oldpath, (Directory) newpath);
		}
		// Otherwise, if OLDPATH is a Directory and NEWPATH is a Directory
		else if (oldpath instanceof Directory & newpath instanceof Directory) {
			/*
			 * Call the moveDir method with OLDPATH and NEWPATH as its
			 * parameters
			 */
			moveDir((Directory) oldpath, (Directory) newpath);
		}
		// Otherwise, if OLDPATH is File and NEWPATH is a Directory
		else if (oldpath instanceof File & newpath instanceof File) {
			moveFile((File) oldpath, (File) newpath);
		}
		/* Otherwise, meaning OLDPATH is a Directory and NEWPATH is a File,
		 * which is not valid
		 */
		else {
			ExceptionHandler.invalidMoveCommand();
		}
		return "";
	}

	public void moveDir(Directory oldpath, Directory newpath) {
		// Create a new Directory and set it to OLDPATH
		Directory dir = oldpath;
		// Delete OLDPATH
		FileSystem.deleteDirectory(oldpath);
		// Find the Directory in NEWPATH with the same name as OLDPATH
		Directory oldInNew = newpath.getSubDirectory(dir.getName());
		// If it does not exist
		if (oldInNew == null) {
			// Add dir as subdirectory of NEWPATH
			newpath.addDirectory(dir);
		}
		// Otherwise, meaning it must be overwritten
		else {
			// Remove the Directory in NEWPATH with the same name as OLDPATH
			FileSystem.deleteDirectory(oldInNew);
			// Add dir as subdirectory of NEWPATH
			newpath.addDirectory(dir);
		}
	}

	public void moveFile(File oldpath, Directory newpath) {
		// Add oldpath File to newpath
		newpath.addFile(oldpath);
	}

	public void moveFile(File oldpath, File newpath) {
		// Append oldpath's text onto newpath
		newpath.setText(newpath.getText() + "\n" + oldpath.getText());
		// Delete OLDPATH in it original location
		// FileSystem.deleteFile(oldpath);
	}

	@Override
	public String printDocumentation() {
		return (documentation);
	}

}
