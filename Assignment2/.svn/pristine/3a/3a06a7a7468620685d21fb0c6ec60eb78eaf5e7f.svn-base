package driver;

public class Copy extends Command {
	
	private String documentation = 
	    (" Description:\n--------------------------------------------\n\tLike"
	        + " mv, but takes File or Directory from OLDPATH and copies\n\t"
	        + "to NEWPATH. If OLDPATH is a directory, recursively copy\n\t"
	        + "the directory's contents into NEWPATH\n Syntax:\n--------------"
	        + "------------------------------\n\t/#: cp OLDPATH NEWPATH\n\t"
	        + "Where OLDPATH & NEWPATH are paths that leads to a File or\n\tDi"
	        + "rectory where the content gets copied.\n\n\t===REDIRECTION===\n"
	        + "\t/#: cp OLDPATH NEWPATH [> OUTFILE]\n\tWhere cp output text ov"
	        + "erwrites OUTFILE's text.\n\t/#: cp OLDPATH NEWPATH [>> OUTFILE]"
	        + "\n\t Where cp output text appends to OUTFILE.\n Examples:\n----"
	        + "----------------------------------------\n\t/#: cp /Users /Pro"
	        + "grams\n\t/#: cp /File.txt /Documents\n\t/#: cp /File1.txt /File"
	        + "2.txt\n Possible Exceptions:\n---------------------------------"
	        + "-----------\n\t invalidSyntaxException, invalidPathException");

	public String runCommand(String input) {
		// Remove extra spaces from input
		input = input.trim().replaceAll(" +", " ");
		// Split the input into OLDPATH and NEWPATH at the space
		String[] inputs = input.split(" ");
		// Find the desired Directory/File for OLDPATH
		Object oldpath = FileSystem.pathToDirorFile(inputs[0]);
		// Find the desired Directory/File for NEWPATH
		Object newpath = FileSystem.pathToDirorFile(inputs[1]);
		// If OLDPATH is a File and NEWPATH is a Directory
		if (oldpath instanceof File & newpath instanceof Directory) {
			/* Call the copyFile(File, Directory) method with OLDPATH and
			 * NEWPATH as its parameters
			 */
			copyFile((File) oldpath, (Directory) newpath);
		}
		// Otherwise, if OLDPATH is a Directory and NEWPATH is a Directory
		else if (oldpath instanceof Directory & newpath instanceof Directory) {
			/* Call the copyDir method with OLDPATH and NEWPATH as its
			 * parameters
			 */
			copyDir((Directory) oldpath, (Directory) newpath);
		}
		// Otherwise, if OLDPATH is File and NEWPATH is a Directory
		else if (oldpath instanceof File & newpath instanceof File) {
			/* Call the copyFile(File, File) method with OLDPATH and NEWPATH as
			 * its parameters
			 */
			copyFile((File) oldpath, (File) newpath);
		}
		/* Otherwise, meaning OLDPATH is a Directory and NEWPATH is a File,
		 * which is not valid
		 */
		else {
			ExceptionHandler.invalidCopyCommand();
		}
		// Return an empty String
		return "";
	}

	public void copyDir(Directory oldpath, Directory newpath) {
		// Create a new Directory with the same name as OLDPATH
		Directory newdir = new Directory(oldpath.getName());
		// Call the helper function, copy, with newpath, newdir and oldpath
		copy(newpath, newdir, oldpath);
	}
	
	public void copy(Directory parent, Directory child, Directory old) {
		// Set child to be a subdirectory of parent
		parent.addDirectory(child);
		// For every subdirectory of the old
		for (Directory d : old.getSubDirectories()) {
			/* Recursively call this method with child, a new directory with
			 * with the same name as the current subdirectory, and the current
			 * subdirectory
			 */
			copy(child, new Directory(d.getName()), d);
		}
		// For every File of old
		for (File f : old.getAllFiles()) {
			// Call copyFile method with the old's Files and child
			copyFile(f, child);
		}
	}
	
	public void copyFile(File oldpath, Directory newpath) {
		// Create a new File
		File newfile = new File();
		// Make its text equal to the old file's text
		newfile.setName(oldpath.getName());
		// Make its name equal to the old file's name
		newfile.setText(oldpath.getText());
		// Set the newfile to be inside child
		newpath.addFile(newfile);
	}
	
	public void copyFile(File oldpath, File newpath) {
		// Append oldpath's text onto newpath
		newpath.setText(newpath.getText() + "\n" + oldpath.getText());
	}
	
	@Override
	public String printDocumentation() {
		return documentation;
	}
}
