package test;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.*;
import driver.*;

public class DirectoryMakeTest {
  private static DirectoryMake mkdir;
  //Instantiate the output scanners
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;
  
  @BeforeClass
  public static void setUpClass() {
    mkdir = new DirectoryMake();
    Command.add_Command("mkdir", mkdir);
  }
  
  @Before
  public void setUpStream() {
    // Make a new scanner before every test case
    System.setOut(new PrintStream(outContent));
  }
  
  @After
  public void tearDown() {
 // Destroy the old scanner after every test case
    System.setOut(originalOut);
  }

  @Test
  public void testMakeOneDirectoryWithRelativePath() {
    String input = "mkdir bob";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertTrue(FileSystem.get_cur_dir().getSubDirectory("bob") != null);
  }
  
  @Test
  public void testMakeMultipleDirectoryFullPaths() {
    // Test for all cases.
    String input = "mkdir /Users /Programs /Users/Muizz /Users/Muizz/Desktop";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Users") 
        instanceof Directory);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Programs") 
        instanceof Directory);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Users/Muizz") 
        instanceof Directory);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Users/Muizz/Desktop") 
        instanceof Directory);
  }
  
  @Test
  public void testMakeMultipleDirectoriesWithException() {
    String input = "mkdir /System32 /Will/Sam /Users";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertTrue(FileSystem.pathToDirorFile("/System32") 
        instanceof Directory);
    Assert.assertEquals("Error: /Will is not a valid path."
        + System.getProperty("line.separator"), outContent.toString());
    Assert.assertTrue(FileSystem.pathToDirorFile("/Users")
        instanceof Directory);
  }
  
  @Test
  public void testMakeNoDirectoryException() {
    String input = "mkdir";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertEquals("Invalid syntax for given Command. Check man COMMAND"
        + System.getProperty("line.separator"), outContent.toString());
    
  }
  
  @Test
  public void testDuplicateDirectoryMakeException() {
    String input = "mkdir /Carl /Carl";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertEquals("Carl already exists in given path."
        + System.getProperty("line.separator"), outContent.toString());
  }
  
  @Test
  public void testDuplicateDirectoryInAnotherDirectory() {
    String input = "mkdir /Carl /Carl/Carl";
    Validator v = new Validator(input.split(" "), input);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Carl") 
        instanceof Directory);
    Assert.assertTrue(FileSystem.pathToDirorFile("/Carl/Carl") 
        instanceof Directory);
    
  }

}
