package test;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import driver.FileSystem;
import driver.Directory;
import driver.ExceptionHandler;
import org.junit.*;
import driver.File;

public class fileSystemTest {
  // Instantiate the output scanners
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;
  
  @BeforeClass
  public static void setUpClass() {
    // Make a mini file System.
    String[] dir_names = {"Users", "Muizz", "Desktop", "Documents"};
    for (String name: dir_names) {
      FileSystem.get_cur_dir().addDirectory(new Directory(name));
      FileSystem.set_cur_dir(FileSystem.get_cur_dir().getSubDirectory(name));
    }
    // Make a new file at current directory
    FileSystem.get_cur_dir().addFile(new File("Hello_World", "hello world"));
  }
  
  @Before
  public void setUpStream() {
    // Make a new scanner before every test case
    System.setOut(new PrintStream(outContent));
  }
  
  @After
  public void restoreStreams() {
    // Destroy the old scanner after every test case
      System.setOut(originalOut);
  }
  
  @Test
  public void testTracePathForRoot() {
    Assert.assertEquals("/", FileSystem.tracePath(FileSystem.getRoot(), ""));
  }
  
  @Test
  public void testNewCurrentDirectory() {
    Assert.assertTrue(FileSystem.get_cur_dir().getName().equals("Documents"));
  }
  
  
  @Test
  public void testTracePathFromDocuments() {
    String tracedpath = FileSystem.tracePath(FileSystem.get_cur_dir(), "");
    Assert.assertEquals(tracedpath, "/Users/Muizz/Desktop/Documents/");
  }
  
  @Test
  public void testPathToDirectory() {
    Object dir_to_find = FileSystem.pathToDirorFile("/Users/Muizz/Desktop");
    Directory expected = FileSystem.get_cur_dir().get_Parent();                                                            
    Assert.assertTrue(dir_to_find == expected);
  }
  
  @Test
  public void testPathToFile() {
    Object file_to_find = FileSystem.pathToDirorFile(
        "/Users/Muizz/Desktop/Documents/Hello_World");
    File expected = FileSystem.get_cur_dir().getFile("Hello_World");
    Assert.assertTrue(file_to_find == expected);
  }
  
  @Test
  public void testExceptionPathToDirOrFileFullPath() {
    FileSystem.pathToDirorFile("/Sam");
    Assert.assertEquals("Error: /Sam is not a valid path."
        + System.getProperty("line.separator"), outContent.toString());
  }
  
  @Test
  public void testExceptionPathToDirOrFileRelativePath() {
    FileSystem.pathToDirorFile("Muizz/Schleepy");
    Assert.assertEquals("Error: Muizz/Schleepy is not a valid path."
        + System.getProperty("line.separator"), outContent.toString());
  }

}
