==== A2 phase I marking ====

Your assignment is marked by: Amol Dosanjh, amol.dosanjh@mail.utoronto.ca

Group number: 0371

UTORID usernames of members: ahmed323, alaimoa1, ellio232, khuran53

Total deductions: 9

Grade: D+

Your team's Phase II grade is based on this scale:

    http://www.artsci.utoronto.ca/newstudents/transition/academic/grading

The way we graded is as follows: your team starts with an A+. When errors and

problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the

severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A

     A -> A-

You were asked to follow the Scrum process. A big part of that is to maintain

a product backlog and a sprint backlog.

==== Product and Sprint backlogs ==== [up to -6]

Several steps can be lost for these kinds of issues:

- [ ]  No evidence of Product or Sprint backlog -6

- [ ]  No evidence of team assigning tasks to team members -3

- [ ]  SB items not taken directly from PB -1

- [ ]  SB items not broken down into smaller steps -1

- [ ]  PB, SB uses noticeably bad grammar and/or spelling -2

[Total deductions in this section: 0]

==== Java Style ==== [up to -6]

Steps can be lost for these kinds of issues:

- [X]  Java naming conventions not followed (camelCase, no_underscores) -1

- [X]  Instance variable names not meaningful (e.g., "Label1" is not a good name) -1

- [ ]  Bad indentation -1

- [ ]  Lack of consistency in style across files -1

- [ ]  Bad use of whitespace: too much or too little -1

- [ ]  Class names are frequently not noun phrases -1

- [ ]  Method names are frequently not verb phrases -1

- [X]  Not following the 80character column width limit. -1

TA COMMENTS: underscores used in multiple classes and variables (CommandHistory variables and method names as an example), numerous lines going past 80 characters in multiple classes, f is not a good instance variable name (EchoFile)

[Total deductions in this section: 3]

==== Design ==== [up to -6]

Several steps can be lost for these kinds of issues:

- [ ]  public instance variables instead of setters and getters -1 to -2

- [ ]  not a good breakdown of classes and methods (everything static;) -1

- [ ]  long methods exist (more than roughly 30 lines from brace to brace) -1

- [ ]  hard to add new commands -1

- [ ]  no unified path handling mechanism -2

- [X]  redirection doesn't easily incorporate new commands -2

TA COMMENTS: EchoAppend in EchoFile is non-private, redirection embedded into Echo

[Total deductions in this section: 2]

==== Javadoc ==== [up to -3]

Several steps can be lost for these kinds of issues:

- [ ]  Missing Javadoc on methods -1 for infrequent problems, up to -3 for frequent

- [ ]  Missing Javadoc on class -1

- [ ]  No Javadoc on instance vars -1

- [ ]  Missing use @param and @return tags -1

- [ ]  Unclear English: bad grammar, bad spelling up to -2

[Total deductions in this section: 0]

==== Correctness ==== [up to -6]

- [ ]  Code doesn't compile without modification (if the fix is simple) -1

- [ ]  Code that is complete (from the SB) doesn't work completely: up to -2

- [X]  Code crashes: -3

- [ ]  Every 3 failed test cases -1

TA COMMENTS: code crashing when using cd on a non-directory file

[Total deductions in this section: 4]

Failed test cases [4]:

1. Run empty command
Input:

Expected:
(no output)
Actual:
 is not a valid command.

2. cd no args
Input:
cd
Expected:
(appropriate error message)
Actual:
(no output)

3. cd into non-directory file
Input:
echo "a" > b
cd b
Expected:
(appropriate error message)
Actual:
(crash)

4. echo append
Input:
echo "a" > b
echo "aa" >> b
cat b
Expected:
a
aa
Actual:
aaa


