package driver;

import java.util.List;

public class DirectoryList extends Command {

  private void printDirContents(Directory dir) {
    // get the list of all directories and list of all files
    List<File> dir_files = dir.getAllFiles();
    List<Directory> subDirs = dir.getSubDirectories();
    String dir_contents = "";
    // Append each file and directory to the string dir_contents
    for (File file : dir_files) {
      dir_contents = dir_contents + " " + file.getName();
    }
    for (Directory directory : subDirs) {
      dir_contents = dir_contents + " " + directory.getName();
    }
    // Print the string with all of the directory contents
    System.out.println(dir.getName() + ":" + dir_contents);
  }

  /**
   * main method that prints the list of dirs/files in the given dir or the 
   * file itself if path directs to a file.
   * 
   * @param path: A string representation of the path
   */
  private void ls(String path) {
    // Get name of directory or file that you are trying to use ls on.
    String name = path.substring(path.lastIndexOf("/") + 1);
    // Get the path of the parent directory of the dir/file.
    String parent_path = path.substring(0, path.length() - name.length());
    // Check if parent directory is the root. If so, skip path_to_dir
    Directory parent_dir = null;
    if (parent_path.length() == 1) {
      parent_dir = FileSystem.getRoot();
    } else {
      parent_dir = FileSystem.path_to_dir(parent_path);
    }
    // Find if the path leads to a file or directory
    if (Validator.valid_dir(parent_dir, name)) {
      // print directory's contents after getting directory from path_to_dir
      Directory dir = FileSystem.path_to_dir(path);
      this.printDirContents(dir);
    } else if (Validator.valid_file(parent_dir, name)) {
      // prints file name
      System.out.println(name);
    } else if (path.length() == 1 && parent_dir == FileSystem.getRoot()) {
      // Assume the directory is the root in this case
      this.printDirContents(parent_dir);
    }
  }

  public void run_command(String Input) {
    // Remove whitespace from both front and back then split into diff paths
    String[] paths = Input.trim().split(" ");
    // check if input is empty or not
    if (Input.length() == 0) {
      // Print current directory contents if no path is given
      this.printDirContents(FileSystem.get_cur_dir());
    } else {
      // loop through each path until all paths have been addressed
      for (String path : paths) {
        this.ls(path);
      }
    }
  }
}
