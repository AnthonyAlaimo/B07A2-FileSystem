package test;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.*;
import driver.*;
import java.lang.reflect.Field;

public class CommandHistoryTest {
  private static CommandHistory history = new CommandHistory();
  private static ViewFile cat = new ViewFile();
  private static String output = "";
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;
  private final String[] History = 
    {"testcase", "Jibberish", "mkdir", "pwd failure", "zzz"};
  private FileSystem<Directory> fs;
  private Validator checkInput;
  
  @BeforeClass
  public static void setUpClass() {
    Command.add_Command("history", history);
  }
  
  @Before
  public void setUp() throws Exception {
    // Make a new scanner before every test case for catching errors
    System.setOut(new PrintStream(outContent));
    // Make an empty output
    CommandHistoryTest.output = "";
    // Add some history to commandHistory
    for (String old_input: History) {
      CommandHistory.addHistory(old_input);
    }
    fs = FileSystem.getInstance();
    FileSystem.getRoot().addFile(new File("OUTFILE", "oldtext"));
  }
  
  @After
  public void tearDown() throws Exception {
    // Destroy the old scanner after every test case meant for error catching
      System.setOut(originalOut);
      CommandHistory.clearHistory();
      Field field = (fs.getClass()).getDeclaredField("fs");
      field.setAccessible(true);
      field.set(null, null); //setting the ref parameter to null
  }
  
  @Test
  public void testForViewingAlotOfHistory() {
    CommandHistory.addHistory("history");
    output = CommandHistoryTest.history.runCommand("");
    Assert.assertEquals("1.testcase\n2.Jibberish\n3.mkdir\n4.pwd failure\n5.z"
        + "zz\n6.history\n", CommandHistoryTest.output);
  }
  
  @Test
  public void testForTruncatedHistory() {
    CommandHistory.addHistory("history 3");
    CommandHistoryTest.output = CommandHistoryTest.history.runCommand(" 3");
    Assert.assertEquals("4.pwd failure\n5.zzz\n6.history 3\n", output);
  }
  
  @Test
  public void testForTruncateHigherThanCommandHistorySize() {
    CommandHistory.addHistory("history 100");
    output = CommandHistoryTest.history.runCommand(" 100");
    Assert.assertEquals("1.testcase\n2.Jibberish\n3.mkdir\n4.pwd failure\n5."
        + "zzz\n6.history 100\n" , output);
  }
  
  @Test
  public void testFoInvalidSyntaxOfTruncateHistory() {
    CommandHistory.addHistory("history again");
    output = CommandHistoryTest.history.runCommand(" again");
    Assert.assertEquals("Error: Invalid syntax for history. Check man history"
        + System.getProperty("line.separator"), outContent.toString());
  }

  @Test
  public void testForSpacesInbetweenCmdAndCmdinput() {
   CommandHistory.addHistory("history      1");
   output = CommandHistoryTest.history.runCommand("      1");
   Assert.assertEquals("6.history      1\n", output);
  }
  
  @Test
  public void testForSpacesBeforeCommand() {
    CommandHistory.addHistory("    history");
    boolean checkInput = Validator.validateLeadingWhiteSpace("    history");
    Assert.assertFalse(checkInput);
  }
  
  @Test
  public void testForTrailingWhiteSpacesAfterCmdinput() {
    CommandHistory.addHistory("history 1     ");
    output = CommandHistoryTest.history.runCommand(" 1     ");
    Assert.assertEquals("6.history 1     \n", output);
   }
  
  @Test 
  public void testForWrongSyntaxAfterProperSyntax() {
    CommandHistory.addHistory("history 1 again");
    output = CommandHistoryTest.history.runCommand(" 1 again");
    Assert.assertEquals("Error: Invalid syntax for history. Check man history"
        + System.getProperty("line.separator"), outContent.toString());
  }
  
  @Test
  public void testForAppendOutputToOUTFILE() {
    FileSystem.getRoot().addFile(new File("OUTFILE", "oldtext"));
    checkInput = new Validator("history 1 >> OUTFILE");
    output = cat.runCommand(" OUTFILE");
    Assert.assertEquals("OUTFILE: oldtext6.history 1 >> OUTFILE\n", output);
  }
  
  @Test
  public void testForOverWriteOutputToOUTFILE() {
    FileSystem.getRoot().addFile(new File("OUTFILE", "oldtext"));
    checkInput = new Validator("history 1 > OUTFILE");
    output = cat.runCommand(" OUTFILE");
    Assert.assertEquals("OUTFILE: 6.history 1 > OUTFILE\n", output);
  }
  
  @Test
  public void testForNoErrorRedirection() {
    checkInput = new Validator("history again > OUTFILE");
    output = cat.runCommand(" OUTFILE");
    Assert.assertEquals("OUTFILE: oldtext", output);
  }
  
  @Test public void testforInvalidRedirection() {
    checkInput = new Validator("history 1 >>> OUTFILE");
    output = cat.runCommand(" OUTFILE");
    Assert.assertEquals("OUTFILE: oldtext", output);
  }

}
