package driver;

/**
 * This class corresponds to the popd method, which pops the next directory off
 * of the DirectoryStack when the input "popd" is entered.
 */
public class DirectoryPop extends Command {
	private String documentation = "\n Description: \n\n Removes the top entry"
			+ " from the directory stack and makes it the current working"
			+ " directory.\n\n Examples:\n\n popd\n\n Exceptions: \n";

	/**
	 * This method calls the popDirectory method in this class, DirectoryPop,
	 * with no parameters. The input should be an empty String, otherwise an
	 * exception must be used.
	 * 
	 * @param input The input entered by the user to be used for the popd
	 * method, should be empty String.
	 */
	public void run_command(String input) {
		// If the inputed is empty, as wanted (and required)
		if (input.length() == 0) {
			// Call the popDirectory method
			popDirectory();
		}
		// Otherwise, which is an invalid input from the user
		else {
			// Call an invalidPathException in ExceptionHandler class with the
			// given String input as its parameter
			ExceptionHandler.invalidSyntaxException();;
		}
	}

	/**
	 * This method pops off the directory on the top of the DirectoryStack and
	 * sets the that popped directory to be the new current working directory.
	 */
	private void popDirectory() {
		// Call the pop method in the DirectoryStack class and set it to a new
		// Directory object called pop
		Directory pop = DirectoryStack.pop();
		// Set the current working directory to be pop, the popped Directory
		FileSystem.set_cur_dir(pop);
	}

	/**
	 * This method prints the documentation corresponding to the popd command,
	 * explaining the necessary syntax and what the command does.
	 */
	@Override
	public void print_documentation() {
		// TODO Auto-generated method stub
		System.out.println(documentation);
	}
}
