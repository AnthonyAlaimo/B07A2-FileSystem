package driver;

public class Move extends Command {

	private String documentation = "";

	public String runCommand(String input) {
		// Remove extra spaces from input
		input = input.trim().replaceAll(" +", " ");
		// Split the input into OLDPATH and NEWPATH at the space
		String[] inputs = input.split(" ");
		// Find the desired Directory/File for OLDPATH
		Object oldpath = FileSystem.pathToDirorFile(inputs[0]);
		// Find the desired Directory/File for NEWPATH
		Object newpath = FileSystem.pathToDirorFile(inputs[1]);
		// If OLDPATH is the root directory
		if (oldpath == FileSystem.getRoot()) {
			// Create rootObjectError with mv as its input
			ExceptionHandler.rootObjectError("mv");
			// Return empty String to break method
			return "";
				}
		// If OLDPATH is a File and NEWPATH is a Directory
		if (oldpath instanceof File & newpath instanceof Directory) {
			/* Call the findDirForFile method to find the Directory that
			 * OLDPATH is located inside of
			 */
			Directory oldDir = findDirForFile(inputs[0]);
			/* Call the move(File, Directory) method with OLDPATH, NEWPATH
			 * and the Directory that OLDPATH is located in as its parameters
			 */
			move((File) oldpath, (Directory) newpath, oldDir);
		}
		// Otherwise, if OLDPATH is a Directory and NEWPATH is a Directory
		else if (oldpath instanceof Directory & newpath instanceof Directory) {
			/* Call the move(Directory, Directory) method with OLDPATH and
			 * NEWPATH as its parameters
			 */
			move((Directory) oldpath, (Directory) newpath);
		}
		// Otherwise, if OLDPATH is File and NEWPATH is a Directory
		else if (oldpath instanceof File & newpath instanceof File) {
			/* Call the findDirForFile method to find the Directory that
			 * OLDPATH is located inside of
			 */
			Directory oldDir = findDirForFile(inputs[0]);
			/* Call the move(File, File) method with OLDPATH, NEWPATH and
			 * the Directory that OLDPATH is located in as its parameters
			 */
			move((File) oldpath, (File) newpath, oldDir);
		}
		/* Otherwise, meaning OLDPATH is a Directory and NEWPATH is a File,
		 * which is not valid
		 */
		else if (oldpath instanceof Directory & newpath instanceof File) {
			ExceptionHandler.invalidSyntaxException("mv");
		}
		/* Otherwise, do nothing, the exception has already been handled
		 * 
		 */
		return "";
	}

	public void move(Directory oldpath, Directory newpath) {
		// Create a new Directory and set it to OLDPATH
		Directory dir = oldpath;
		// Delete OLDPATH
		oldpath.deleteDirectory();
		// Find the Directory in NEWPATH with the same name as OLDPATH
		Directory oldInNew = newpath.getSubDirectory(dir.getName());
		// If it does not exist
		if (oldInNew == null) {
			// Add dir as subdirectory of NEWPATH
			newpath.addDirectory(dir);
		}
		// Otherwise, meaning it must be overwritten
		else {
			// Remove the Directory in NEWPATH with the same name as OLDPATH
			oldInNew.deleteDirectory();
			// Add dir as subdirectory of NEWPATH
			newpath.addDirectory(dir);
		}
	}

	public void move(File oldpath, Directory newpath, Directory oldDir) {
		// Create a new File with the name and text of OLDPATH
		File newFile = new File(oldpath.getName(), oldpath.getText());
		// Delete OLDPATH
		oldDir.deleteFile(oldpath.getName());
		// Set the newfile to be inside newpath
		newpath.addFile(newFile);
	}

	public void move(File oldpath, File newpath, Directory oldDir) {
		// Append oldpath's text onto newpath
		newpath.setText(oldpath.getText());
		// Delete OLDPATH in it original location
		oldDir.deleteFile(oldpath.getName());
	}
	
	public Directory findDirForFile(String input) {
		// Create a new Directory
		Directory dir;
		// If the String input does not contain a /
		if (input.contains("/") == false) {
			// The Directory that the File is inside of is the cwd
			dir = FileSystem.getCurDir();
		}
		// Otherwise
		else {
			// Store the index of the last / in a new int
			int lastSlash = input.lastIndexOf("/");
			// Find the String up to that last /
			String newInput = input.substring(0,lastSlash);
			// If the length of the newInput is 0, meaning its blank
			if (newInput.length() == 0) {
				// The Directory that the File is inside is the root
				dir = FileSystem.getRoot();
			}
			// Otherwise
			else {
				/* Call the pathToDirorFile method in FileSystem, with the
				 * result casted to type Directory in order to find the
				 * Directory that the File is located inside
				 */
				dir = (Directory) FileSystem.pathToDirorFile(newInput);
			}
		}
		// Return the found Directory
		return dir;
	}

	@Override
	public String printDocumentation() {
		return (documentation);
	}

}
