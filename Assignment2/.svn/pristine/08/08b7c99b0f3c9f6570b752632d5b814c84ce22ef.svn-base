package driver;

/**
 * This class represents the echo command, which overwrites the given text of a file
 * with the given text or if no file is given, just prints out the given string
 */
public class EchoFile extends Command{
	EchoAppend f = new EchoAppend();
	/**
	 * This method takes two strings, one representating a path or file name
	 * and text for that file, and overwrites that files current text with
	 * the given text.
	 * 
	 * @param text, a string representing the wanted text of a file
	 * @param path, a string representing the path to or just the name of
	 * a file, which will be mutated
	 */
	public void echo(String text, String path) {
		/*
		 * If a path is given we need to first see if the parent directory of the
		 * file exist
		 */
		Object parentDir = FileSystem.pathToDirorFile(path.substring(0, path.lastIndexOf("/") + 1));
		/*
		 * if the directory exist, we then check to see if the file exist. if the file
		 * exist we set its current text to the indicated text. otherwise a new file is
		 * created inside the parent directory, with the given file name
		 */
		if(parentDir instanceof Directory){
			String name = path.substring(path.lastIndexOf("/") + 1);
			File f = ((Directory)parentDir).getFile(name);
			if (f instanceof File){
				f.setText(text);
			}
			else {
				File newfile = new File(name, text);
				((Directory)parentDir).addFile(newfile);
			}
		}
	}

	/**
	 * This method takes a string and prints it back out to the user
	 * 
	 * @param text, a string representing the wanted text of a file
	 */
	// if no file is given, print the text onto the shell
	public void echo(String text) {
		System.out.println(text);
	}

	/**
	 * This method divides the echo class into 3 main methods and figures out
	 * which is the necessary method to be ran.
	 * 
	 * @param input, a string representing the input of a user, trying to use the 
	 * echo command.
	 */
	public void run_command(String input) {
		/*
		 *  There are 3 cases for all the possible echo commands. Before considering
		 *  any of the cases we need to identify what is the string of the command 
		 *  input.
		 */
		String text= input.substring(input.indexOf("\"") + 1, input.lastIndexOf("\""));
		input = input.substring(input.lastIndexOf("\"") + 1).trim();
		/*
		 * depending on which echo command is being used, we call the necessary
		 * echo method.
		 */
		if (input.contains(">>")){
			f.echo(text, 
					input.substring(input.lastIndexOf(">>") + 3, input.length()));
		}
		else if (input.contains(">")) {
			this.echo(text, 
					input.substring(input.lastIndexOf(">") + 2,  input.length()));
		}
		else {
			this.echo(text);
		}
	}

	@Override
	public void print_documentation() {
		// TODO Auto-generated method stub

	}

}