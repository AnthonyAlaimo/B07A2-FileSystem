package driver;
/**
 * Class responsible for the command 'tree' which takes in no input other than
 * the command name itself and prints a tree of the given FileSystem.
 * @author ahmed323
 *
 */
public class TreeOfFS extends Command {
  /**
   * tree_str concatenates the directories of the FileSystem.
   */
  private static String tree_str;
  
  /**
   * Helper method that ensures each directory gets the right amount of 
   * indentation depending on the level the directory resides in.
   * @param number_of_repeats: the level of the directory.
   * @return a tab replicated by directory level amount of times.
   */
  private String repeat_tab(Integer number_of_repeats) {
    // Instantiate variable;
    String tabs = "";
    // Add an indent number_of_repeats times onto the instantiated variable.
    for (int i = 0; i < number_of_repeats; i++) {
      tabs += "\t";
    }
    // return the level of indent.
    return tabs;
  }
  
  /**
   * Grabs the root of the FileSystem and recursively lists out all directories
   * with their corresponding indentation.
   * @param dir: the current directory of the traversal.
   * @param Indent_lvl: the level of indent analogous to level of directory.
   */
  private void get_tree(Directory dir, Integer Indent_lvl) {
    // Get the indent level first
    String indentBy = repeat_tab(Indent_lvl);
    /* Put current directory name inside tree and recursively do the same for
     * current directory's sub directories.
     */
    TreeOfFS.tree_str += indentBy + dir.getName() + "\n";
    for (Directory subDir: dir.getSubDirectories()) {
      this.get_tree(subDir, Indent_lvl + 1);
    }
  }
  
  /**
   * Caller for the command tree that prints out the entire FileSystem.
   * @param input: the input followed after tree has been written.
   */
  @Override
  public String run_command(String input) {
    // Ensure if input follows proper syntax before getting tree.
    if (input.equals("")) {
      // Recursively get tree of FileSystem and update it to tree_str variable.
      TreeOfFS.tree_str = "";
      this.get_tree(FileSystem.getRoot(), 0);
    } else {
      // Assume user inputed wrong syntax, call an exception and return nothing.
      ExceptionHandler.invalidSyntaxException();
      return "";
    }
    // return the FileSystem's toString equivalent.
    return TreeOfFS.tree_str;
  }

  @Override
  public String print_documentation() {
    // TODO Auto-generated method stub
    return "";
  }

}
