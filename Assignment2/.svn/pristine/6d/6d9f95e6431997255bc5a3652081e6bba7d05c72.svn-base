// **********************************************************
// Assignment2:
// Student1: Muizz Uddin Ahmed
// UTORID user_name: ahmed323
// UT Student #: 1004160043
// Author:
//
// Student2: Nicholas Michael Gibson Elliott
// UTORID user_name: ellio232
// UT Student #: 1004416713
// Author:
//
// Student3: Anthony Alaimo
// UTORID user_name: alaimoa1
// UT Student #: 1004421814
// Author:
//
// Student4: Millan Singh Khurana
// UTORID user_name: khuran53
// UT Student #: 1004169259
// Author:
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.*;
import driver.*;
import java.lang.reflect.Field;

public class DirectoryPathTest {
  private static DirectoryPath pwd = new DirectoryPath();
  private static ViewFile cat = new ViewFile();
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;
  private static String output = "";
  private static FileSystem<Directory> fs = FileSystem.getInstance();
  private static File NEWFILE = new File("NEWFILE", "oldTXT");

  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
    Command.add_Command("pwd", pwd);
    // set up a mini FileSystem
    String[] dir_names = {"Users", "Muizz", "Desktop", "Documents"};
    for (String name : dir_names) {
      FileSystem.getCurDir().addDirectory(new Directory(name));
      FileSystem.setCurDir(FileSystem.getCurDir().getSubDirectory(name));
    }
    // Make a new file at current directory
    FileSystem.getCurDir().addFile(new File("Hello_World", "hello world"));
    FileSystem.getRoot().addFile(NEWFILE);
  }

  @AfterClass
  public static void tearDownClass() throws Exception {
    Field field = (fs.getClass()).getDeclaredField("fs");
    field.setAccessible(true);
    field.set(null, null); // setting the ref parameter to null
  }

  @Before
  public void setUpStream() {
    // Make a new scanner before every test case
    System.setOut(new PrintStream(outContent));
  }

  @After
  public void tearDown() {
    // Destroy the old scanner after every test case
    System.setOut(originalOut);
    // Set current directory back to root and reset NEWFILE's text
    FileSystem.setCurDir(FileSystem.getRoot());
    NEWFILE.setText("oldTXT");
  }

  @Test
  public void testForBigPWDPath() {
    // Traverse to the last directory in the FileSystem path for pwd.
    String[] dir_names = {"Users", "Muizz", "Desktop", "Documents"};
    for (String name : dir_names) {
      FileSystem.setCurDir(FileSystem.getCurDir().getSubDirectory(name));
    }
    output = pwd.runCommand("");
    Assert.assertEquals("/Users/Muizz/Desktop/Documents/", output);
  }

  @Test
  public void testForInvalidPWDInput() {
    output = pwd.runCommand(" Un-needed input");
    Assert.assertEquals(
        "Error: Invalid syntax for pwd. Check man pwd" + 
    System.getProperty("line.separator"), outContent.toString());
  }

  @Test
  public void testForRootPWD() {
    FileSystem.setCurDir(FileSystem.getRoot());
    output = pwd.runCommand("");
    Assert.assertEquals("/", output);
  }

  @Test
  public void testForMakeNEWFILEWithPWD() {
    // make a new file with pwd's output as its text
    new Validator("pwd > /NEWFILE");
    output = cat.runCommand(" /NEWFILE");
    Assert.assertEquals("NEWFILE: /", output);
  }

  @Test
  public void testForAppendNEWFILEWithPWD() {
    FileSystem.setCurDir(FileSystem.getRoot().getSubDirectory("Users"));
    // append to NEWFILE with pwd's output as its text
    new Validator("pwd >> /NEWFILE");
    output = cat.runCommand(" /NEWFILE");
    Assert.assertEquals("NEWFILE: oldTXT/Users/", output);
  }

  @Test
  public void testForInvalidRedirectionSyntax() {
    new Validator("pwd >>> /NEWFILE");
    output = cat.runCommand(" /NEWFILE");
    Assert.assertEquals("NEWFILE: oldTXT", output);
  }

  @Test
  public void testForAnotherInvalidRedirectionSyntax() {
    new Validator("pwd != /NEWFILE");
    output = cat.runCommand(" /NEWFILE");
    Assert.assertEquals("NEWFILE: oldTXT", output);
  }

  @Test
  public void testForLeadingWhiteSpaceError() {
    boolean errorCheck = Validator.validateLeadingWhiteSpace("   pwd");
    // Should return false since input contains leading whitespace
    Assert.assertFalse(errorCheck);
  }

}
